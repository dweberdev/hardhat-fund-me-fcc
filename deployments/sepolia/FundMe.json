{
  "address": "0xeC0D7B6a2B13d5c4819Cf89DE2bd0f2c5ac294f2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x25b947390f03010ec9c804cf207c99fad85cbef759fd7923dba0ff9d24290d38",
  "receipt": {
    "to": null,
    "from": "0x907B0bCF6954ac554576DE5CBcA78e507f8e1243",
    "contractAddress": "0xeC0D7B6a2B13d5c4819Cf89DE2bd0f2c5ac294f2",
    "transactionIndex": 16,
    "gasUsed": "1071750",
    "logsBloom": "0x
    "blockHash": "0x7017353f910da08734a8ae8ac9ea83d5b4d562adc98a156d6173d74d9253dbfc",
    "transactionHash": "0x25b947390f03010ec9c804cf207c99fad85cbef759fd7923dba0ff9d24290d38",
    "logs": [],
    "blockNumber": 4929920,
    "cumulativeGasUsed": "2239208",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "65f99dfe0ba65f927b1893d91815ae46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Daniel Weber\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"a contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title a contract for crowd funding\\n * @author Daniel Weber\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x3db0adcba6745f8d7a0be114580af0c43aa51d5c0aa4fd3d0e22143fc1f0cb01\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xfd2cfd63e8ffd5b71bedf9021381e58fc19065c3d5ded28242d615fbadd6372f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200138b3803806200138b833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112056200018660003960008181610298015281816104b20152818161058f015261071901526112056000f3fe6080604052600436106100865760003560e01c80636b69a592116100595780636b69a5921461014c578063893d20e8146101775780639e87a5cd146101a2578063b60d4288146101cd578063be2693f0146101d757610086565b80630343fb251461008b5780631bf6132d146100c85780633a7b6c74146101055780633ccfd60b14610142575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b3d565b6101ee565b6040516100bf9190610b83565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190610b3d565b610236565b6040516100fc9190610b83565b60405180910390f35b34801561011157600080fd5b5061012c60048036038101906101279190610bca565b61024e565b6040516101399190610c06565b60405180910390f35b61014a610296565b005b34801561015857600080fd5b5061016161057e565b60405161016e9190610b83565b60405180910390f35b34801561018357600080fd5b5061018c61058b565b6040516101999190610c06565b60405180910390f35b3480156101ae57600080fd5b506101b76105b3565b6040516101c49190610c80565b60405180910390f35b6101d56105dd565b005b3480156101e357600080fd5b506101ec610717565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006020528060005260406000206000915090505481565b60006001828154811061026457610263610c9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561039f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610355575b5050505050905060005b815181101561044d576000600182815481106103c8576103c7610c9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044590610cf9565b9150506103a9565b50600067ffffffffffffffff81111561046957610468610d42565b5b6040519080825280602002602001820160405280156104975781602001602082028036833780820191505090505b50600190805190602001906104ad929190610a33565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104f490610da2565b60006040518083038185875af1925050503d8060008114610531576040519150601f19603f3d011682016040523d82523d6000602084013e610536565b606091505b505090508061057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610e14565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061061c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095790919063ffffffff16565b101561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490610e80565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106ab9190610ea0565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610847576000600182815481106107c2576107c1610c9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083f90610cf9565b91505061079f565b50600067ffffffffffffffff81111561086357610862610d42565b5b6040519080825280602002602001820160405280156108915781602001602082028036833780820191505090505b50600190805190602001906108a7929190610a33565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108ce90610da2565b60006040518083038185875af1925050503d806000811461090b576040519150601f19603f3d011682016040523d82523d6000602084013e610910565b606091505b5050905080610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90610e14565b60405180910390fd5b50565b60008061096383610993565b90506000670de0b6b3a7640000858361097c9190610ef6565b6109869190610f7f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a14919061103d565b5050509150506402540be40081610a2b91906110b8565b915050919050565b828054828255906000526020600020908101928215610aac579160200282015b82811115610aab5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a53565b5b509050610ab99190610abd565b5090565b5b80821115610ad6576000816000905550600101610abe565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0a82610adf565b9050919050565b610b1a81610aff565b8114610b2557600080fd5b50565b600081359050610b3781610b11565b92915050565b600060208284031215610b5357610b52610ada565b5b6000610b6184828501610b28565b91505092915050565b6000819050919050565b610b7d81610b6a565b82525050565b6000602082019050610b986000830184610b74565b92915050565b610ba781610b6a565b8114610bb257600080fd5b50565b600081359050610bc481610b9e565b92915050565b600060208284031215610be057610bdf610ada565b5b6000610bee84828501610bb5565b91505092915050565b610c0081610aff565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b6000819050919050565b6000610c46610c41610c3c84610adf565b610c21565b610adf565b9050919050565b6000610c5882610c2b565b9050919050565b6000610c6a82610c4d565b9050919050565b610c7a81610c5f565b82525050565b6000602082019050610c956000830184610c71565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0482610b6a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3757610d36610cca565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8c600083610d71565b9150610d9782610d7c565b600082019050919050565b6000610dad82610d7f565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dfe600b83610db7565b9150610e0982610dc8565b602082019050919050565b60006020820190508181036000830152610e2d81610df1565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e6a601b83610db7565b9150610e7582610e34565b602082019050919050565b60006020820190508181036000830152610e9981610e5d565b9050919050565b6000610eab82610b6a565b9150610eb683610b6a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eeb57610eea610cca565b5b828201905092915050565b6000610f0182610b6a565b9150610f0c83610b6a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4557610f44610cca565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8a82610b6a565b9150610f9583610b6a565b925082610fa557610fa4610f50565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fcf81610fb0565b8114610fda57600080fd5b50565b600081519050610fec81610fc6565b92915050565b6000819050919050565b61100581610ff2565b811461101057600080fd5b50565b60008151905061102281610ffc565b92915050565b60008151905061103781610b9e565b92915050565b600080600080600060a0868803121561105957611058610ada565b5b600061106788828901610fdd565b955050602061107888828901611013565b945050604061108988828901611028565b935050606061109a88828901611028565b92505060806110ab88828901610fdd565b9150509295509295909350565b60006110c382610ff2565b91506110ce83610ff2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561110d5761110c610cca565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561114a57611149610cca565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561118757611186610cca565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111c4576111c3610cca565b5b82820290509291505056fea2646970667358221220447dff39787058ddd0562be8e70f6e7b21cac4181f0e6e4a996fc71dc28321ac64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80636b69a592116100595780636b69a5921461014c578063893d20e8146101775780639e87a5cd146101a2578063b60d4288146101cd578063be2693f0146101d757610086565b80630343fb251461008b5780631bf6132d146100c85780633a7b6c74146101055780633ccfd60b14610142575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b3d565b6101ee565b6040516100bf9190610b83565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190610b3d565b610236565b6040516100fc9190610b83565b60405180910390f35b34801561011157600080fd5b5061012c60048036038101906101279190610bca565b61024e565b6040516101399190610c06565b60405180910390f35b61014a610296565b005b34801561015857600080fd5b5061016161057e565b60405161016e9190610b83565b60405180910390f35b34801561018357600080fd5b5061018c61058b565b6040516101999190610c06565b60405180910390f35b3480156101ae57600080fd5b506101b76105b3565b6040516101c49190610c80565b60405180910390f35b6101d56105dd565b005b3480156101e357600080fd5b506101ec610717565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006020528060005260406000206000915090505481565b60006001828154811061026457610263610c9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561039f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610355575b5050505050905060005b815181101561044d576000600182815481106103c8576103c7610c9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044590610cf9565b9150506103a9565b50600067ffffffffffffffff81111561046957610468610d42565b5b6040519080825280602002602001820160405280156104975781602001602082028036833780820191505090505b50600190805190602001906104ad929190610a33565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104f490610da2565b60006040518083038185875af1925050503d8060008114610531576040519150601f19603f3d011682016040523d82523d6000602084013e610536565b606091505b505090508061057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610e14565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061061c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095790919063ffffffff16565b101561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490610e80565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106ab9190610ea0565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610847576000600182815481106107c2576107c1610c9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083f90610cf9565b91505061079f565b50600067ffffffffffffffff81111561086357610862610d42565b5b6040519080825280602002602001820160405280156108915781602001602082028036833780820191505090505b50600190805190602001906108a7929190610a33565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108ce90610da2565b60006040518083038185875af1925050503d806000811461090b576040519150601f19603f3d011682016040523d82523d6000602084013e610910565b606091505b5050905080610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90610e14565b60405180910390fd5b50565b60008061096383610993565b90506000670de0b6b3a7640000858361097c9190610ef6565b6109869190610f7f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a14919061103d565b5050509150506402540be40081610a2b91906110b8565b915050919050565b828054828255906000526020600020908101928215610aac579160200282015b82811115610aab5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a53565b5b509050610ab99190610abd565b5090565b5b80821115610ad6576000816000905550600101610abe565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0a82610adf565b9050919050565b610b1a81610aff565b8114610b2557600080fd5b50565b600081359050610b3781610b11565b92915050565b600060208284031215610b5357610b52610ada565b5b6000610b6184828501610b28565b91505092915050565b6000819050919050565b610b7d81610b6a565b82525050565b6000602082019050610b986000830184610b74565b92915050565b610ba781610b6a565b8114610bb257600080fd5b50565b600081359050610bc481610b9e565b92915050565b600060208284031215610be057610bdf610ada565b5b6000610bee84828501610bb5565b91505092915050565b610c0081610aff565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b6000819050919050565b6000610c46610c41610c3c84610adf565b610c21565b610adf565b9050919050565b6000610c5882610c2b565b9050919050565b6000610c6a82610c4d565b9050919050565b610c7a81610c5f565b82525050565b6000602082019050610c956000830184610c71565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0482610b6a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3757610d36610cca565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8c600083610d71565b9150610d9782610d7c565b600082019050919050565b6000610dad82610d7f565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dfe600b83610db7565b9150610e0982610dc8565b602082019050919050565b60006020820190508181036000830152610e2d81610df1565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e6a601b83610db7565b9150610e7582610e34565b602082019050919050565b60006020820190508181036000830152610e9981610e5d565b9050919050565b6000610eab82610b6a565b9150610eb683610b6a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eeb57610eea610cca565b5b828201905092915050565b6000610f0182610b6a565b9150610f0c83610b6a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4557610f44610cca565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8a82610b6a565b9150610f9583610b6a565b925082610fa557610fa4610f50565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fcf81610fb0565b8114610fda57600080fd5b50565b600081519050610fec81610fc6565b92915050565b6000819050919050565b61100581610ff2565b811461101057600080fd5b50565b60008151905061102281610ffc565b92915050565b60008151905061103781610b9e565b92915050565b600080600080600060a0868803121561105957611058610ada565b5b600061106788828901610fdd565b955050602061107888828901611013565b945050604061108988828901611028565b935050606061109a88828901611028565b92505060806110ab88828901610fdd565b9150509295509295909350565b60006110c382610ff2565b91506110ce83610ff2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561110d5761110c610cca565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561114a57611149610cca565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561118757611186610cca565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111c4576111c3610cca565b5b82820290509291505056fea2646970667358221220447dff39787058ddd0562be8e70f6e7b21cac4181f0e6e4a996fc71dc28321ac64736f6c63430008080033",
  "devdoc": {
    "author": "Daniel Weber",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "a contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}